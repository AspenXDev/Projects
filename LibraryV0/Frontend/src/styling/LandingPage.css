/* // path: Frontend/src/pages/LandingPage.jsximport React, { useEffect, useState } from "react"; import { getAllBooks } from "../services/BookService.js"; import { useAuth } from "../contexts/AuthContext.jsx"; import { BookCard } from "../components/books/BookCard.jsx"; import "../styling/LandingPage.css"; const unwrap = (r) => (r && r.data !== undefined ? r.data : r); export function LandingPage() { const { user, logout } = useAuth(); const [books, setBooks] = useState([]); const [featured, setFeatured] = useState([]); const [search, setSearch] = useState(""); const [filterCategory, setFilterCategory] = useState(""); useEffect(() => { getAllBooks() .then(unwrap) .then((data) => { const list = Array.isArray(data) ? data : []; setBooks(list); // Fixed New Arrivals by title (choose three stable titles that exist) const chosenTitles = ["Pride and Prejudice", "1984", "To Kill A Mockingbird"]; const chosen = list.filter((b) => chosenTitles.includes(b.title)); // fallback: if not found, just take first 3 setFeatured(chosen.length ? chosen.slice(0, 3) : list.slice(0, 3)); }) .catch((err) => { console.error("Error fetching books:", err); setBooks([]); setFeatured([]); }); }, []); const categories = Array.from(new Set((books || []).map((b) => b.category).filter(Boolean))).sort(); const filteredBooks = (books || []).filter((b) => { const titleMatch = !search || (b.title || "").toLowerCase().includes(search.toLowerCase()); const categoryMatch = !filterCategory || ((b.category || "").toLowerCase() === filterCategory.toLowerCase()); return titleMatch && categoryMatch; }); return ( */ <div className="landing-container"> <header className="landing-header"> <h1>Welcome to the Library</h1> <div> {!user ? ( <button className="login-btn" onClick={() => (window.location.href = "/login")}> Login </button> ) : ( <button className="login-btn" onClick={() => { logout(); window.location.href = "/"; }} > Logout </button> )} </div> </header> <section className="search-filter"> <input aria-label="Search books by title" type="text" placeholder="Search by title..." value={search} onChange={(e) => setSearch(e.target.value)} /> <select value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)}> <option value="">All Categories</option> {categories.map((cat) => ( <option key={cat} value={cat}> {cat} </option> ))} </select> </section> {featured.length > 0 && ( <section className="featured-books"> <h2>New Arrivals</h2> <div className="books-grid"> {featured.map((book) => { const key = book.bookId ?? book.book_id ?? book.id ?? book.isbn ?? book.title; return <BookCard key={key} book={book} />; })} </div> </section> )} <section className="all-books" style={{ marginTop: 24 }}> <h2>All Books</h2> {filteredBooks.length === 0 ? ( <p className="muted">No books found.</p> ) : ( <div className="books-grid"> {filteredBooks.map((book) => { const key = book.bookId ?? book.book_id ?? book.id ?? book.isbn ?? book.title; return <BookCard key={key} book={book} />; })} </div> )} </section> </div> ); }
/* Page
.landing-page {
  min-height: 100vh;
  background: radial-gradient(
      1200px 600px at 20% -10%,
      #cfe8ff 0%,
      transparent 60%
    ),
    radial-gradient(1100px 700px at 120% 10%, #e6f1ff 0%, transparent 50%),
    #eaf4ff;
  color: #003366;
  display: flex;
  flex-direction: column;
}

/* Top bar */
.landing-topbar {
  position: sticky;
  top: 0;
  z-index: 5;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 14px 18px;
  background: rgba(255, 255, 255, 0.65);
  backdrop-filter: blur(8px);
  border-bottom: 1px solid rgba(0, 0, 0, 0.06);
}

.landing-title {
  margin: 0;
  font-size: 1.25rem;
  letter-spacing: 0.2px;
}

/* Hero */
.landing-hero {
  padding: 28px 18px 10px;
}

.landing-hero h2 {
  margin: 0 0 6px;
  font-size: 1.5rem;
}

.landing-hero p {
  margin: 0;
  color: #355a84;
}

/* Cards grid */
.cards-wrap {
  padding: 10px 14px 40px;
}

.public-grid {
  display: grid;
  gap: 18px;
  grid-template-columns: repeat(1, minmax(0, 1fr));
}

@media (min-width: 600px) {
  .public-grid {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}
@media (min-width: 1024px) {
  .public-grid {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}
@media (min-width: 1440px) {
  .public-grid {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
}

/* Public Card (glassmorphism) */
.public-card {
  border-radius: 16px;
  padding: 16px;
  background: linear-gradient(
    180deg,
    rgba(255, 255, 255, 0.35),
    rgba(255, 255, 255, 0.18)
  );
  border: 1px solid rgba(255, 255, 255, 0.55);
  box-shadow: 0 10px 30px rgba(0, 44, 92, 0.15);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  transition: transform 0.18s ease, box-shadow 0.18s ease,
    border-color 0.18s ease;
}

.public-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 16px 36px rgba(0, 44, 92, 0.2);
  border-color: rgba(255, 255, 255, 0.75);
}

.public-card__head {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 10px;
  margin-bottom: 10px;
}

.public-card__title {
  font-size: 1.05rem;
  line-height: 1.3;
  margin: 0;
}

.badge {
  display: inline-block;
  font-size: 0.75rem;
  line-height: 1;
  padding: 6px 10px;
  border-radius: 999px;
  border: 1px solid rgba(0, 0, 0, 0.06);
  background: rgba(255, 255, 255, 0.7);
}
.badge.available {
  color: #0a7d2e;
}
.badge.borrowed {
  color: #9a1a1a;
}
.badge.reserved {
  color: #7a5e00;
}

.public-card__meta {
  display: grid;
  gap: 8px;
}

.meta-line {
  display: grid;
  grid-template-columns: 110px 1fr;
  gap: 10px;
}
.meta-label {
  color: #2a5076;
  font-weight: 600;
}
.meta-value {
  color: #0b2c4d;
}

/* Infinite loader */
.infinite-loader {
  text-align: center;
  color: #466c95;
  padding: 18px 0 8px;
}

/* Errors / muted states */
.error {
  color: #9a1a1a;
}
.muted {
  color: #597fa8;
}

/* Auth drawer */
.auth-toggle-btn {
  border: 1px solid rgba(0, 0, 0, 0.08);
  background: #0d3b66;
  color: #fff;
  padding: 8px 12px;
  border-radius: 10px;
  cursor: pointer;
}
.auth-toggle-btn:hover {
  background: #0c355c;
}

.auth-backdrop {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.35);
  z-index: 20;
}

.auth-panel {
  position: fixed;
  right: 0;
  top: 0;
  height: 100%;
  width: min(420px, 90vw);
  background: #ffffff;
  box-shadow: -20px 0 50px rgba(0, 0, 0, 0.25);
  z-index: 21;
  display: flex;
  flex-direction: column;
  animation: slideIn 200ms ease-out;
}
@keyframes slideIn {
  from {
    transform: translateX(20px);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.auth-header {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px;
  border-bottom: 1px solid #eef2f8;
}
.auth-tab {
  border: none;
  background: transparent;
  padding: 8px 12px;
  border-radius: 8px;
  cursor: pointer;
  color: #0b2c4d;
}
.auth-tab.active {
  background: #eff5ff;
  border: 1px solid #d7e6ff;
}

.auth-close {
  margin-left: auto;
  border: none;
  background: transparent;
  font-size: 18px;
  cursor: pointer;
  color: #244a70;
}

.auth-form {
  padding: 14px 12px 24px;
  display: grid;
  gap: 12px;
}
.auth-form label {
  display: grid;
  gap: 6px;
  color: #224462;
  font-size: 0.95rem;
}
.auth-form input {
  padding: 10px 12px;
  border: 1px solid #d7e6ff;
  border-radius: 10px;
  font-size: 1rem;
}
.auth-form input:focus {
  outline: none;
  border-color: #8fb9ff;
  box-shadow: 0 0 0 3px rgba(143, 185, 255, 0.25);
}

.primary-btn {
  margin-top: 6px;
  padding: 10px 14px;
  background: #0d3b66;
  color: #fff;
  border: none;
  border-radius: 10px;
  cursor: pointer;
}
.primary-btn:hover {
  background: #0c355c;
}

.hint {
  font-size: 0.9rem;
  color: #456b92;
  background: #f5f9ff;
  border: 1px solid #e7f0ff;
  border-radius: 10px;
  padding: 10px 12px;
} */
